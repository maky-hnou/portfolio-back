"""Module defining the ChatDTO class for chat data transfer representation.

This module provides the ChatDTO class, which is used for transferring chat-related
data between different layers of the application. It includes fields such as the chat ID,
off-topic response count, and the creation timestamp.

Classes:
    ChatDTO: A Pydantic data model for representing chat data, including a unique chat ID,
    off-topic message count, and the creation time.

Dependencies:
    - BaseModel: Pydantic base class for defining data models.
    - UUID: Class for representing universally unique identifiers.
    - datetime: Class for handling date and time information.
    - Field: Pydantic utility for declaring model fields.
    - ConfigDict: Pydantic configuration utility for model configuration options.
"""

from datetime import datetime
from uuid import UUID, uuid4

from pydantic import BaseModel, ConfigDict, Field


class ChatDTO(BaseModel):
    """Data Transfer Object for chat-related data.

    Attributes:
        chat_id (UUID): Unique identifier for the chat, auto-generated by default.
        off_topic_response_count (int): Counter for the number of off-topic responses.
        created_at (datetime): Timestamp for when the chat was created, defaults to the current UTC time.
        model_config (ConfigDict): Configuration dictionary for model settings, allowing
        population from attribute-style input.
    """

    model_config = ConfigDict(from_attributes=True)
    chat_id: UUID = Field(default_factory=uuid4)
    off_topic_response_count: int = 0
    created_at: datetime = Field(default_factory=datetime.utcnow)
