"""Module defining the MessageDTO class and MessageBy enumeration for message data representation.

This module provides the MessageDTO class for managing message-related data, and the
MessageBy enumeration to distinguish between the sources of messages (HUMAN, AI, SYSTEM).
It also includes custom validation logic for message text preprocessing.

Classes:
    MessageBy: An enumeration class to specify the origin of the message (HUMAN, AI, SYSTEM).
    MessageDTO: A Pydantic data model for representing message data, including a unique message ID,
    chat ID, message text, message source, and timestamp.

Dependencies:
    - BaseModel: Pydantic base class for defining data models.
    - Enum: Base class for creating enumerations.
    - UUID: Class for representing universally unique identifiers.
    - datetime: Class for handling date and time information.
    - Field: Pydantic utility for declaring model fields.
    - field_validator: Pydantic decorator for validating and transforming fields during model validation.
    - re: Module for regular expression operations.
    - ValidationInfo: Pydantic class for providing contextual information to validators.
"""

import re
from datetime import datetime
from enum import Enum
from uuid import UUID, uuid4

from pydantic import BaseModel, ConfigDict, Field, field_validator
from pydantic_core.core_schema import ValidationInfo


class MessageBy(str, Enum):
    """Enumeration of possible message sources.

    Attributes:
        - HUMAN (str): A message sent by a human user.
        - AI (str): A message generated by an AI system.
        - SYSTEM (str): A system-generated message (e.g., instructions or notifications).
    """

    HUMAN = "human"
    AI = "ai"
    SYSTEM = "system"


class MessageDTO(BaseModel):
    """Data Transfer Object for message-related data.

    Attributes:
        message_id (UUID): Unique identifier for the message, auto-generated by default.
        chat_id (UUID): Unique identifier for the associated chat.
        message_text (str): The content of the message.
        message_by (MessageBy): Enum indicating the source of the message (HUMAN, AI, SYSTEM).
        created_at (datetime): Timestamp indicating when the message was created, defaults to the current UTC time.
        model_config (ConfigDict): Configuration dictionary to allow model population from attributes.
    """

    model_config = ConfigDict(from_attributes=True)
    message_id: UUID = Field(default_factory=uuid4)
    chat_id: UUID
    message_text: str
    message_by: MessageBy
    created_at: datetime = Field(default_factory=datetime.utcnow)

    @field_validator("message_text", mode="before")
    @classmethod
    def replace_pronouns(cls: type["MessageDTO"], v: str, values: ValidationInfo) -> str:
        """Replace certain pronouns in the message text with the user's name if the source is HUMAN.

        Args:
            v (str): The message text to be validated and modified.
            values (ValidationInfo): Information about the field being validated, including the value of other fields.

        Returns:
            str: The modified message text with pronouns replaced, or the original text if the source is not HUMAN.
        """
        if values.data.get("message_by") == "human":
            return re.sub(
                r"\b(he|him|his)\b",
                lambda match: "Hani" if match.group(0) in {"he", "him"} else "Hani's",
                v,
            )
        return v
