"""Module containing the TextDataDTO class for representing text data entities.

This module defines a data transfer object (DTO) for storing information related to text data.
The `TextDataDTO` class is used to manage metadata about a text file, including its content,
source, topic, and creation timestamp.

Classes:
    TextDataDTO: Data transfer object for text data, containing fields for text metadata.

Dependencies:
    - UUID: Class from `uuid` for generating unique identifiers.
    - datetime: Module from `datetime` for handling timestamps.
    - BaseModel: Pydantic's base class for data validation and serialization.
    - ConfigDict: Pydantic class for configuration of model behavior.
    - Field: Pydantic class for defining model fields.
"""

from datetime import datetime
from uuid import UUID, uuid4

from pydantic import BaseModel, ConfigDict, Field


class TextDataDTO(BaseModel):
    """Data transfer object for storing and managing text data metadata.

    Attributes:
        text_id (UUID): A unique identifier for the text data, auto-generated by default.
        filename (str): The name of the text file.
        text (str): The content of the text file.
        source (str): The origin or source of the text (e.g., URL, document name).
        topic (str): The main topic or category of the text.
        created_at (datetime): The timestamp indicating when the text data was created. Defaults
            to the current UTC time.
    """

    model_config = ConfigDict(from_attributes=True)
    text_id: UUID = Field(default_factory=uuid4)
    filename: str
    text: str
    source: str
    topic: str
    created_at: datetime = Field(default_factory=datetime.utcnow)
